     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit
     5                                  import exit msvcrt.dll
     6                                  extern scanf
     7                                  import scanf msvcrt.dll
     8                                  extern printf
     9                                  import printf msvcrt.dll
    10                                  
    11                                  segment data use32 class=data
    12 00000000 <res 00000004>          	x		RESD		1
    13 00000004 <res 00000004>          	y		RESD		1
    14 00000008 <res 00000004>          	z		RESD		1
    15 0000000C 256400                  	str1	DB		'%d', 0
    16 0000000F 256400                  	str2	DB		'%d', 0
    17 00000012 256400                  	str3	DB		'%d', 0
    18 00000015 <res 00000008>          	tmp		RESD		2
    19                                  
    20                                  segment data use32 class=code
    21                                  	start:
    22                                  
    23                                  
    24                                  
    25                                  	; input statement
    26 0000001D 68[00000000]            		PUSH	DWORD		x
    27 00000022 68[0C000000]            		PUSH	DWORD		str1
    28 00000027 FF15[00000000]          		CALL	[scanf]
    29 0000002D 83C408                  		ADD		ESP,		4 * 2
    30                                  
    31                                  	; input statement
    32 00000030 68[04000000]            		PUSH	DWORD		y
    33 00000035 68[0F000000]            		PUSH	DWORD		str2
    34 0000003A FF15[00000000]          		CALL	[scanf]
    35 00000040 83C408                  		ADD		ESP,		4 * 2
    36                                  
    37                                  	; z = 0
    38 00000043 B800000000              		MOV		EAX,		0
    39 00000048 A3[08000000]            		MOV		[z],		EAX
    40                                  
    41                                  	; [tmp + 0] = [z] + [x]
    42 0000004D A1[08000000]            		MOV		EAX,		[z]
    43 00000052 0305[00000000]          		ADD		EAX,		[x]
    44 00000058 A3[15000000]            		MOV		[tmp + 0],		EAX
    45                                  	; z = [tmp + 0]
    46 0000005D A1[15000000]            		MOV		EAX,		[tmp + 0]
    47 00000062 A3[08000000]            		MOV		[z],		EAX
    48                                  
    49                                  	; [tmp + 4] = [z] + [y]
    50 00000067 A1[08000000]            		MOV		EAX,		[z]
    51 0000006C 0305[04000000]          		ADD		EAX,		[y]
    52 00000072 A3[19000000]            		MOV		[tmp + 4],		EAX
    53                                  	; z = [tmp + 4]
    54 00000077 A1[19000000]            		MOV		EAX,		[tmp + 4]
    55 0000007C A3[08000000]            		MOV		[z],		EAX
    56                                  
    57                                  	; output statement
    58 00000081 FF35[08000000]          		PUSH	DWORD		[z]
    59 00000087 68[12000000]            		PUSH	DWORD		str3
    60 0000008C FF15[00000000]          		CALL	[printf]
    61 00000092 83C408                  		ADD		ESP,		4 * 2
    62                                  
    63                                  	;exit
    64 00000095 6A00                    		PUSH		DWORD		0
    65 00000097 FF15[00000000]          		CALL		[exit]
