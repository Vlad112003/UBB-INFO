     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit
     5                                  import exit msvcrt.dll
     6                                  extern scanf
     7                                  import scanf msvcrt.dll
     8                                  extern printf
     9                                  import printf msvcrt.dll
    10                                  
    11                                  segment data use32 class=data
    12 00000000 <res 00000004>          	a		RESD		1
    13 00000004 <res 00000004>          	b		RESD		1
    14 00000008 <res 00000004>          	c		RESD		1
    15 0000000C <res 00000004>          	squares		RESD		1
    16 00000010 256400                  	str1	DB		'%d', 0
    17 00000013 <res 00000010>          	tmp		RESD		4
    18                                  
    19                                  segment data use32 class=code
    20                                  	start:
    21                                  
    22                                  	; a = 3
    23 00000023 B803000000              		MOV		EAX,		3
    24 00000028 A3[00000000]            		MOV		[a],		EAX
    25                                  
    26                                  
    27                                  	; b = 4
    28 0000002D B804000000              		MOV		EAX,		4
    29 00000032 A3[04000000]            		MOV		[b],		EAX
    30                                  
    31                                  
    32                                  	; c = 25
    33 00000037 B819000000              		MOV		EAX,		25
    34 0000003C A3[08000000]            		MOV		[c],		EAX
    35                                  
    36                                  
    37                                  	; squares = 0
    38 00000041 B800000000              		MOV		EAX,		0
    39 00000046 A3[0C000000]            		MOV		[squares],		EAX
    40                                  
    41                                  	; [tmp + 0] = [a] * [a]
    42 0000004B 8B1D[00000000]          		MOV		EBX,		[a]
    43 00000051 A1[00000000]            		MOV		EAX,		[a]
    44 00000056 F7EB                    		IMUL	EBX
    45 00000058 A3[13000000]            		MOV		[tmp + 0],		EAX
    46                                  	; a = [tmp + 0]
    47 0000005D A1[13000000]            		MOV		EAX,		[tmp + 0]
    48 00000062 A3[00000000]            		MOV		[a],		EAX
    49                                  
    50                                  	; [tmp + 4] = [squares] + [a]
    51 00000067 A1[0C000000]            		MOV		EAX,		[squares]
    52 0000006C 0305[00000000]          		ADD		EAX,		[a]
    53 00000072 A3[17000000]            		MOV		[tmp + 4],		EAX
    54                                  	; squares = [tmp + 4]
    55 00000077 A1[17000000]            		MOV		EAX,		[tmp + 4]
    56 0000007C A3[0C000000]            		MOV		[squares],		EAX
    57                                  
    58                                  	; [tmp + 8] = [b] * [b]
    59 00000081 8B1D[04000000]          		MOV		EBX,		[b]
    60 00000087 A1[04000000]            		MOV		EAX,		[b]
    61 0000008C F7EB                    		IMUL	EBX
    62 0000008E A3[1B000000]            		MOV		[tmp + 8],		EAX
    63                                  	; b = [tmp + 8]
    64 00000093 A1[1B000000]            		MOV		EAX,		[tmp + 8]
    65 00000098 A3[04000000]            		MOV		[b],		EAX
    66                                  
    67                                  	; [tmp + 12] = [squares] + [b]
    68 0000009D A1[0C000000]            		MOV		EAX,		[squares]
    69 000000A2 0305[04000000]          		ADD		EAX,		[b]
    70 000000A8 A3[1F000000]            		MOV		[tmp + 12],		EAX
    71                                  	; squares = [tmp + 12]
    72 000000AD A1[1F000000]            		MOV		EAX,		[tmp + 12]
    73 000000B2 A3[0C000000]            		MOV		[squares],		EAX
    74                                  
    75                                  	; output statement
    76 000000B7 FF35[0C000000]          		PUSH	DWORD		[squares]
    77 000000BD 68[10000000]            		PUSH	DWORD		str1
    78 000000C2 FF15[00000000]          		CALL	[printf]
    79 000000C8 83C408                  		ADD		ESP,		4 * 2
    80                                  
    81                                  	;exit
    82 000000CB 6A00                    		PUSH		DWORD		0
    83 000000CD FF15[00000000]          		CALL		[exit]
