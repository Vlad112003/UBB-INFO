1. grep -E "1[01]{2,}[0]{2}" <a.txt un numar divizibil cu 4 se imparte de 2 ori la 2 -> impartind la 2 ii scot un 0
de la final (ASC) deci am nevoie de 2 0-uri la final
2. sed -E "s/([13579])([aeiou])/\2\1/g" <fisier
3. grep -E -o "\<[0-9]{1,2}-[0-9]{1,2}\>" <fisier | sort | uniq
4. ps -ef | grep -E "^....[0-9]{4}" | awk '{print $1}' | sort | uniq -c | sort -n -r
5. 
   #!/bin/bash

   NR_FIS=$(find -type f -name "*\.txt"| wc -l)
   NR_DIRS=$(find -type d | wc -l)
   MED=$(($NR_FIS/$((NR_DIRS+1))))
   echo Media de fisiere txt: $MED

6. nu va crea decat atunci cand sunt ambii copii si mai trb sa scadem parintele -> 2^3-1-1=6
7. p->p1->p2->p3
8. A
   B
   C
   sau orice alta ordine a lor
9. Scrie cat poate (nu asteapta sa se elibereze spatiu). Return cati bytes a scris.
10. Asteapta sa il deschida cineva pt citire -> nu se opreste.
11. Dispar si ele.
12. pthread_mutex_lock(&m)
    n++;
    pthread_mutex_unlock(&m);
13. C B A (1 delay)
14. avantaj: nu se produc coliziuni atat de des
    dezavantaj: e mai lenta cautarea
15. necititte si nescrise recent
16. complicat
17. 4 set uri de 2 pagini pt ca e mai rapida cautarea.
18. A*B^3
19. nimic
20. Blocarea in aceeasi ordine a resurselor.
