//4
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
pthread_t citire,thr[50];
pthread_mutex_t mtx;
int n,v[9000],minim=INT_MAX;
void* cititor(void* a)
{
        FILE* fd=fopen("fisier","r");
        int i;
        for(i=0;i<n;i++)
        {
                fscanf(fd,"%d",&v[i]);
        }
        fclose(fd);
        return NULL;
}

void* worker(void* arg)
{
        int i,s=0,indice=*(int*)arg;
        for(i=indice*300;i<indice*300+300;i++)
                s=s-v[i];
        pthread_mutex_lock(&mtx);
        int m=rand()%256;
        int calcul=abs(m-s/300);
        if(calcul<minim) minim=calcul;
        pthread_mutex_unlock(&mtx);

        printf("%d\n",calcul);

        return NULL;
}

int main(int argc, char**argv)
{
        scanf("%d",&n);
        int i;
        pthread_mutex_init(&mtx,NULL);

        pthread_create(&citire,NULL,cititor,NULL);
        pthread_join(citire,NULL);

        for(i=0;i<n/300;i++)
        {
        int* aux=(int*)malloc(sizeof(int));
        *aux=i;
        pthread_create(&thr[i],NULL,worker,aux);
        }

        for(i=0;i<n/300;i++)
                pthread_join(thr[i],NULL);
        pthread_mutex_destroy(&mtx);
        printf("MINIM: %d\n",minim);
        return 0;
}
