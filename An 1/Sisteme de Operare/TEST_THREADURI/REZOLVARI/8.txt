//8
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

pthread_mutex_t mtx=PTHREAD_MUTEX_INITIALIZER;
int sum=0,avr,minim=INT_MAX;
pthread_barrier_t barr;
int fr[10],v[90000];
pthread_t citire,thr[10];
int n,k;

void* cititor(void* a)
{
        FILE* fd=fopen("fisier","r");
        int i;
        for(i=0;i<n;i++)
        {
                fscanf(fd,"%d",&v[i]);
        }
        fclose(fd);
        return NULL;
}

void* worker(void* arg)
{

        int i,indice=*(int*)arg,cnt=0;
        for(i=indice*200;i<indice*200+200;i++)
        {
                if(v[i]%k==0) cnt++;
        }

        pthread_mutex_lock(&mtx);
        sum=sum+cnt;
        pthread_mutex_unlock(&mtx);

        pthread_barrier_wait(&barr);
        printf("INTERVAL: %d - %d -> %d\n",indice*200,indice*200+200,cnt);
        return NULL;
}
int main(int argc, char**argv)
{
        printf("introduceti n si k: ");
        scanf("%d %d",&n,&k);
        int i;
        pthread_mutex_init(&mtx,NULL);

        pthread_barrier_init(&barr,NULL,10);

        pthread_create(&citire,NULL,cititor,NULL);
        pthread_join(citire,NULL);

        for(i=0;i<=9;i++)
        {

        int* aux=(int*)malloc(sizeof(int));
        *aux=i;
        pthread_create(&thr[i],NULL,worker,aux); //dau i ca si argument
        }

        for(i=0;i<=9;i++)
                pthread_join(thr[i],NULL);

        pthread_mutex_destroy(&mtx);

        printf("TOTAL: %d\n",sum);

        return 0;
}
