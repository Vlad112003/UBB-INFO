        -:    0:Source:D:/An3Sem2/Structuri de Date si Algoritmi/Lab1/TestScurt.cpp
        -:    0:Graph:D:\An3Sem2\Structuri de Date si Algoritmi\Lab1\cmake-build-debug-coverage\CMakeFiles\Lab1.dir\TestScurt.cpp.gcno
        -:    0:Data:D:\An3Sem2\Structuri de Date si Algoritmi\Lab1\cmake-build-debug-coverage\CMakeFiles\Lab1.dir\TestScurt.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "TestScurt.h"
        -:    2:#include <assert.h>
        -:    3:#include "VectorDinamic.h"
        -:    4:#include "IteratorVectorDinamic.h"
        -:    5:#include <iostream>
        -:    6:
        -:    7:using namespace std;
        -:    8:
function _Z7testAllv called 1 returned 100% blocks executed 80%
        1:    9:void testAll() { //apelam fiecare functie sa vedem daca exista
        1:   10:	VectorDinamic v(4);
        1:   10-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   11:	assert(v.dim() == 0); //adaug niste elemente
        1:   11-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   11-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   11-block  2
call    5 never executed
        1:   11-block  3
        1:   12:	v.adaugaSfarsit(5);
        1:   12-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   13:	v.adauga(1,1);
        1:   13-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   14:	v.adauga(0,10);
        1:   14-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   15:	v.adauga(1,7);
        1:   15-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   16:	v.adauga(1,1);
        1:   16-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   17:	v.adauga(1,11);
        1:   17-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   18:	v.adauga(1,-3);
        1:   18-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   19:	assert(v.dim() == 7);
        1:   19-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   19-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   19-block  2
call    5 never executed
        1:   19-block  3
       1*:   20:	assert(v.sterge(1) == -3);
        1:   20-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   20-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   20-block  2
call    5 never executed
        1:   20-block  3
       1*:   21:	assert(v.sterge(4) == 5);
        1:   21-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   21-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   21-block  2
call    5 never executed
        1:   21-block  3
       1*:   22:	assert(v.dim() == 5);
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   22-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   22-block  2
call    5 never executed
        1:   22-block  3
       1*:   23:	assert(v.modifica(0,7) == 10);
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   23-block  2
call    5 never executed
        1:   23-block  3
       1*:   24:	assert(v.dim() == 5);
        1:   24-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   24-block  2
call    5 never executed
        1:   24-block  3
        1:   25:	IteratorVectorDinamic iv = v.iterator();
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26:    	int vals[]={7,11,1,7,1};
        1:   27:	iv.prim();
        1:   27-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   28:	int k=0;
        6:   29:	while (iv.valid()) {
        1:   29-block  0
        6:   29-block  1
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   29-block  2
branch  3 taken 5
branch  4 taken 1 (fallthrough)
        5:   30:		TElem e = iv.element();
        5:   30-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
       5*:   31:        assert(e==vals[k++]);
        5:   31-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%:   31-block  1
call    2 never executed
        5:   31-block  2
        5:   32:		iv.urmator();
        5:   32-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:   33:	}
        1:   34:}
        1:   34-block  0
call    0 returned 1
    $$$$$:   34-block  1
call    1 never executed
        -:   35:
        -:   36://void testUnice() {
        -:   37://
        -:   38://    VectorDinamic v(4);
        -:   39://    assert(v.dim() == 0); //adaug niste elemente
        -:   40://    v.adauga(0,1);
        -:   41://    v.adauga(1,2);
        -:   42://    v.adauga(1,3);
        -:   43://    v.adauga(1,4);
        -:   44://    v.adauga(1,5);
        -:   45://    assert(v.suntUnice() == true);
        -:   46://    v.adauga(1,5);
        -:   47://    assert(v.suntUnice() == false);
        -:   48://}
